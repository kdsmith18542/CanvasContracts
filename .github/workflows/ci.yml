name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust backend tests and builds
  rust:
    name: Rust Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
          - rust: stable
            target: x86_64-unknown-linux-musl
          - rust: nightly
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true
        profile: minimal

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.target }}-

    - name: Install wasm-pack
      uses: actions-rs/install@v0.1
      with:
        crate: wasm-pack
        use-tool-cache: true

    - name: Install wasmtime
      uses: actions-rs/install@v0.1
      with:
        crate: wasmtime-cli
        use-tool-cache: true

    - name: Check Rust code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features

    - name: Build for release
      run: cargo build --release

    - name: Build WASM modules
      run: |
        if [ -f "contracts/Cargo.toml" ]; then
          cd contracts
          wasm-pack build --target web --release
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      if: matrix.rust == 'stable' && matrix.target == 'x86_64-unknown-linux-gnu'
      with:
        name: rust-build-${{ matrix.target }}
        path: |
          target/release/
          contracts/pkg/ (if exists)

  # Frontend tests and builds
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          npm ci
        fi
        if [ -f "frontend/package.json" ]; then
          cd frontend
          npm ci
        fi

    - name: Run linting
      run: |
        if [ -f "package.json" ] && npm run lint --if-present; then
          npm run lint
        fi
        if [ -f "frontend/package.json" ] && npm run lint --if-present; then
          cd frontend
          npm run lint
        fi

    - name: Run tests
      run: |
        if [ -f "package.json" ] && npm test --if-present; then
          npm test
        fi
        if [ -f "frontend/package.json" ] && npm test --if-present; then
          cd frontend
          npm test
        fi

    - name: Build frontend
      run: |
        if [ -f "package.json" ] && npm run build --if-present; then
          npm run build
        fi
        if [ -f "frontend/package.json" ] && npm run build --if-present; then
          cd frontend
          npm run build
        fi

    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: |
          dist/ (if exists)
          frontend/dist/ (if exists)
          build/ (if exists)
          frontend/build/ (if exists)

  # Security and code quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    needs: [rust, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run npm audit
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate
        fi
        if [ -f "frontend/package.json" ]; then
          cd frontend
          npm audit --audit-level=moderate
        fi

    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: .
        base: HEAD~1

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [rust, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'npm'

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add your integration test commands here
        # Example: cargo test --test integration_tests

    - name: Test WASM compilation pipeline
      run: |
        echo "Testing WASM compilation pipeline..."
        # Add WASM compilation tests here
        # Example: test contract compilation from visual graph to WASM

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [rust, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build Rust documentation
      run: |
        if [ -f "Cargo.toml" ]; then
          cargo doc --no-deps --document-private-items
        fi

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          target/doc/ (if exists)
          docs/

  # Release preparation
  release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [rust, frontend, security, integration, docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-artifacts/

    - name: Create release package
      run: |
        mkdir -p release
        cp -r release-artifacts/* release/ || true
        tar -czf canvas-contracts-release.tar.gz release/

    - name: Upload release package
      uses: actions/upload-artifact@v3
      with:
        name: canvas-contracts-release
        path: canvas-contracts-release.tar.gz 